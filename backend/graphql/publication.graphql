extend type Query {
    "Return a publiation by ID"
    publication(id: ID @eq): Publication @find

    "Return all publications"
    publications(
        is_publicly_visible: Boolean @scope(name: "IsPubliclyVisible")
    ): [Publication!]!
        @paginate(defaultCount: 100)
        @can(ability: "view", query: true)
}

extend type Mutation {
    "Create a new publication"
    createPublication(
        publication: CreatePublicationInput! @spread
    ): Publication! @create @can(ability: "create")

    updatePublication(
        publication: UpdatePublicationInput! @spread
    ): Publication @update @can(ability: "update", query: true)

    "Create an association between a user, role, and publication"
    createPublicationUser(
        publication_user: PublicationUserInput! @spread
    ): PublicationUser! @create @can(ability: "create", injectArgs: true)

    "Create an association between a user, role, and publication"
    deletePublicationUser(
        publication_user: PublicationUserInput! @spread
    ): PublicationUser!
        @guard
        @can(ability: "delete", injectArgs: true)
        @field(
            resolver: "App\\GraphQL\\Mutations\\DeletePublicationUser@delete"
        )
}

input CreatePublicationInput {
    name: String
    style_criterias: CreateStyleCriteriaHasMany
        @rename(attribute: "styleCriterias")
}

input UpdatePublicationInput {
    id: ID!
    name: String
    description: String
    style_criterias: UpdateStyleCriteriaHasMany
        @rename(attribute: "styleCriterias")
}
input CreateStyleCriteriaHasMany {
    create: [CreateStyleCriteriaInput!]
}

input UpdateStyleCriteriaHasMany {
    create: [CreateStyleCriteriaInput!]
    update: [UpdateStyleCriteriaInput!]
    delete: [ID!]
}

input CreateStyleCriteriaInput {
    name: String!
    description: String!
    icon: String
}

input UpdateStyleCriteriaInput {
    id: ID!
    name: String
    description: String
    icon: String
}

"""
Input type for creating or modifying associations between a publication, role, and user
"""
input PublicationUserInput @validator(class: "PublicationUserInputValidator") {
    user_id: ID!
    role_id: ID!
    publication_id: ID!
}

"""
A publication that has users, reviews, and submissions
"""
type Publication {
    id: ID!
    name: String!
    created_at: DateTime
    updated_at: DateTime
    submissions: [Submission]! @hasMany
    users: [User]! @belongsToMany
    is_publicly_visible: Boolean
    style_criterias: [StyleCriteria!]! @hasMany(relation: "styleCriterias")
}

"""
A user associated with a publication and a role
"""
type PublicationUser {
    id: ID!
    role_id: ID!
    publication_id: ID!
    user_id: ID!
}

type StyleCriteria {
    id: ID!
    name: String!
    description: String
    publication: Publication!
    icon: String
}
