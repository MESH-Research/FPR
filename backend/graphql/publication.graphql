extend type Query {
    "Return a publication by ID"
    publication(id: ID @eq): Publication @find @can(ability: "view", find: "id")

    "Return all publications"
    publications(
        is_publicly_visible: Boolean @scope(name: "IsPubliclyVisible")
    ): [Publication!]!
        @paginate(defaultCount: 100)
        @can(ability: "view", query: true)
}

"""
A publication that has users, reviews, and submissions
"""
type Publication {
    id: ID!
    name: String!
    created_at: DateTime
    updated_at: DateTime
    submissions: [Submission]! @hasMany
    publication_admins: [User!]! @belongsToMany(relation: "publicationAdmins")
    editors: [User!]! @belongsToMany(relation: "editors")
    is_publicly_visible: Boolean
    style_criterias: [StyleCriteria!]! @hasMany(relation: "styleCriterias")
    my_role: PublicationRole @method(name: "getMyRole")
    effective_role: PublicationRole @method(name: "getEffectiveRole")
}

type StyleCriteria {
    id: ID!
    name: String!
    description: String
    publication: Publication!
    icon: String
}

extend type Mutation {
    "Create a new publication"
    createPublication(
        publication: CreatePublicationInput! @spread
    ): Publication! @create @can(ability: "create")

    updatePublication(
        publication: UpdatePublicationInput! @spread
    ): Publication @update @can(ability: "update", query: true)
}

input CreatePublicationInput {
    name: String
    is_publicly_visible: Boolean
    style_criterias: CreateStyleCriteriaHasMany
        @rename(attribute: "styleCriterias")
}

input CreateStyleCriteriaHasMany {
    create: [CreateStyleCriteriaInput!]
}

input CreateStyleCriteriaInput {
    name: String!
    description: String
    icon: String
}

input UpdatePublicationInput {
    id: ID!
    name: String
    description: String
    is_publicly_visible: Boolean
    style_criterias: UpdateStyleCriteriaHasMany
        @rename(attribute: "styleCriterias")
    editors: UpdatePublicationEditorsInput
    publication_admins: UpdatePublicationAdministratorsInput
        @rename(attribute: "publicationAdmins")
}

input UpdatePublicationAdministratorsInput {
    connect: [ID!]
    disconnect: [ID!]
}

input UpdatePublicationEditorsInput {
    connect: [ID!]
    disconnect: [ID!]
}

input UpdateStyleCriteriaHasMany {
    create: [CreateStyleCriteriaInput!]
    update: [UpdateStyleCriteriaInput!]
    delete: [ID!]
}

input UpdateStyleCriteriaInput {
    id: ID!
    name: String
    description: String
    icon: String
}

enum PublicationRole {
    publication_admin @enum(value: 2)
    editor @enum(value: 3)
}
