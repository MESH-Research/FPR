name: "Build and Test"

on:
  pull_request:
jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        package: [fpm, web, fpm-dev]
    name: "Build"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Context
        id: context
        run: |
          if [ "$PACKAGE" = "web" ]; then
              echo "context=client" >> $GITHUB_OUTPUT
          else
              echo "context=backend" >> $GITHUB_OUTPUT
          fi
          if [[ "$PACKAGE" == *"dev"* ]]; then
              echo "nodev=0" >> $GITHUB_OUTPUT
          else
              echo "nodev=1" >> $GITHUB_OUTPUT
          fi
        env:
          PACKAGE: ${{ matrix.package }}
      - name: Find Tag
        id: tagger
        run: |
          echo "version=$(git describe --tags)" >> $GITHUB_OUTPUT
          echo "url=https://github.com/MESH-Research/CCR/commits/${GITHUB_SHA} >> $GITHUB_OUTPUT
          echo "date=$(git show -s --format=%cI ${GITHUB_SHA}) >> $GITHUB_OUTPUT
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/mesh-research/pilcrow/${{ matrix.package }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,enable=true
      - name: Login to Github Packages
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image.
        uses: docker/build-push-action@v4
        with:
          context: ${{ steps.context.outputs.context }}
          outputs: type=docker,dest=/tmp/${{ matrix.package }}.tar
          build-args: |
            COMPOSER_NO_DEV=${{ steps.context.outputs.nodev }}
            VERSION=${{ steps.tagger.outputs.version }}
            VERSION_DATE=${{ steps.tagger.outputs.date}}
            VERSION_URL=${{ steps.tagger.outputs.url }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.package }}
          path: /tmp/${{matrix.package}}.tar
  phpunit:
    runs-on: ubuntu-20.04
    env:
      DB_CONNECTION: mysql
      DB_HOST: localhost
      DB_PORT: 3306
      DB_DATABASE: homestead
      DB_USERNAME: root
      DB_PASSWORD: root
      APP_ENV: testing
      APP_DEBUG: true
      APP_KEY: base64:J6SHqWBtKA18a8eCxIWziMSPuJqJRPuqy0GdX75P+rM=
    needs: [build]
    defaults:
      run:
        shell: bash
        working-directory: backend
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: fpm-dev
          path: /tmp
      - name: Load image
        run: |
          docker load --input /tmp/fpm-dev.tar
          docker image ls -a
      - name: Setup Mysql
        run: |
          sudo systemctl start mysql.service
          mysql -uroot -proot -e "CREATE schema $DB_DATABASE;"
