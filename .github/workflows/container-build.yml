name: "Build Containers"

on:
  push:
    branches: [master, development, "renovate/**"]
  pull_request:
jobs:
  build-client:
    runs-on: ubuntu-20.04
    name: "Build Client"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # setup Docker buld action
      - name: Setup Environment (PR)
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          echo "COMMIT_SHA=${COMMIT_SHA}" >> ${GITHUB_ENV}
      - name: Setup Environment (Push)
        if: ${{ github.event_name == 'push' }}
        run: |
          echo "COMMIT_SHA=${GITHUB_SHA}" >> ${GITHUB_ENV}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Github Packages
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image and push to Docker Hub and GitHub Container Registry
        uses: docker/build-push-action@v2
        with:
          # relative path to the place where source code with Dockerfile is located
          context: client
          # Note: tags has to be all lower-case
          tags: |
            ghcr.io/mesh-research/pilcrow/web:${COMMIT_SHA}
          # build on feature branches, push only on main branch
          push: true
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
  build-fpm:
    runs-on: ubuntu-20.04
    name: "Build FPM"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Environment (PR)
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          echo "COMMIT_SHA=${COMMIT_SHA}" >> ${GITHUB_ENV}
      - name: Setup Environment (Push)
        if: ${{ github.event_name == 'push' }}
        run: |
          echo "COMMIT_SHA=${GITHUB_SHA}" >> ${GITHUB_ENV}
      # setup Docker buld action
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Github Packages
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image and push to Docker Hub and GitHub Container Registry
        uses: docker/build-push-action@v2
        with:
          # relative path to the place where source code with Dockerfile is located
          context: backend
          # Note: tags has to be all lower-case
          tags: |
            ghcr.io/mesh-research/pilcrow/fpm:${COMMIT_SHA}
          # build on feature branches, push only on main branch
          push: true
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
  build-fpm-dev:
    runs-on: ubuntu-20.04
    name: "Build FPM-DEV"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Environment (PR)
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          echo "COMMIT_SHA=${COMMIT_SHA}" >> ${GITHUB_ENV}
      - name: Setup Environment (Push)
        if: ${{ github.event_name == 'push' }}
        run: |
          echo "COMMIT_SHA=${GITHUB_SHA}" >> ${GITHUB_ENV}
      # setup Docker buld action
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Github Packages
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image and push to Docker Hub and GitHub Container Registry
        uses: docker/build-push-action@v2
        with:
          context: backend
          build-args: |
            COMPOSER_NO_DEV=0
          # Note: tags has to be all lower-case
          tags: |
            ghcr.io/mesh-research/pilcrow/fpm-dev:${COMMIT_SHA}
          # build on feature branches, push only on main branch
          push: true
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
